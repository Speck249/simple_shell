#ifndef MAIN_H_
#define MAIN_H_

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <limits.h>
#include <fcntl.h>
#include <errno.h>

#define READ_BUF_SIZE 1024
#define WRITE_BUF_SIZE 1024
#define BUF_FLUSH -1

/* command chaining */
#define CMD_NORM  0
#define CMD_OR	  1
#define CMD_AND	  2
#define CMD_CHAIN 3

/** convert_num() **/
#define CONVERT_LOWERCASE  1
#define CONVERT_UNSIGNED   2

/** using sys getline() **/
#define USE_GETLINE 0
#define USE_STRTOK 0

#define HIST_FILE  ".simple_shell_history"
#define HIST_MAX   4096

extern char **environ;
/**
*struct liststr - singly linked list
*@num: first parameter
*@str: second parameter
*@next: third parameter
*/

typedef struct liststr
{
int num;
char *str;
struct liststr *next;
} list_t;

/**
*struct passinfo - pseudo-arguments for uniform prototyping
*@arg: string generated by get_line
*@argv: array of strings generated by arg
*@path: string path for current command
*@argc: argument count
*@line_count: error count
*@err_num: error code for exit/s
*@linecount_flag: count lines of input
*@fname: program filename
*@env: linked list local copy of env
*@environ: custom modified copy of env from LL env
*@history: history node
*@alias: alias node
*@env_changed: indicates env change
*@status: return status of executed command
*@cmd_buf: address of pointer to cmd_buf
*@cmd_buf_type: CMD_type ||, &&, ;
*@readfd: fd from which to read line input
*@histcount: history line count
*/

typedef struct passinfo
{
char *arg;
char **argv;
char *path;
int argc;
unsigned int line_count;
int err_num;
int linecount_flag;
char *fname;
list_t *env;
list_t *history;
list_t *alias;
char **environ;
int env_changed;
int status;

char **cmd_buf;
int cmd_buf_type;
int readfd;
int histcount;
} info_t;

#define INFO_INIT \
{NULL, NULL, NULL, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, \
	0, 0, 0}

/**
*struct builtin - contains a builtin string and related function
*@type: first parameter
*@func: second parameter
*/
typedef struct builtin
{
char *type;
int (*func)(info_t *);
} builtin_table;

/** loop.c >> function prototypes **/
int hsh(info_t *, char **);
int find_builtin(info_t *);
void find_cmd(info_t *);
void fork_cmd(info_t *);

/* pars.c >> function prototypes */
int is_cmd(info_t *, char *);
char *dup_chars(char *, int, int);
char *find_path(info_t *, char *, char *);

/** loopsh.c >> function prototype **/
int loophsh(char **);

/* err.c >> function prototypes */
void _eputs(char *);
int _eputchar(char);
int _putfd(char ch, int fd);
int _putsfd(char *str, int fd);

/* str.c >> function prototypes */
int _strlen(char *);
int _strcmp(char *, char *);
char *starts_with(const char *, const char *);
char *_strcat(char *, char *);

/** str1.c >> function prototypes **/
char *_strcpy(char *, char *);
char *_strdup(const char *);
void _puts(char *);
int _putchar(char);

/* exit.c >> function prototypes */
char *_strncat(char *, char *, int);
char *_strncpy(char *, char *, int);
char *_strchr(char *, char);

/** tok.c >> function prototypes **/
char **strtow(char *, char *);
char **strtow2(char *, char);

/** mem1.c >> function prototypes **/
char *_memset(char *, char, unsigned int);
void ffree(char **);
void *_realloc(void *, unsigned int, unsigned int);

/* mem.c >> function prototypes */
int bfree(void **);

/* conv.c >> function prototypes */
int _isalpha(int);
int is_delim(char, char *);
int interactive(info_t *);
int _atoi(char *);

/* err1.c >> function prototypes */
int _erratoi(char *);
void print_error(info_t *, char *);
int print_d(int, int);
char *convert_num(long int, int, int);
void remove_comments(char *);

/* bltin.c >> function prototypes */
int _cd(info_t *);
int _exit(info_t *);
int _help(info_t *);

/* bltin1.c >> function prototypes */
int set_alias(info_t *, char *);
int print_alias(list_t *);
int unset_alias(info_t *, char *);
int _alias(info_t *);
int _history(info_t *);

/* get_line.c >> function prototypes */
ssize_t get_input(info_t *);
int _getline(info_t *, char **, size_t *);
void sigintHandler(int);

/* get_info.c >> function prototypes */
void clear_info(info_t *);
void set_info(info_t *, char **);
void free_info(info_t *, int)

/* env.c >> function prototypes */
int _env(info_t *);
char *_getenv(info_t *, const char *);
int _setenv(info_t *);
int _unsetenv(info_t *);
int populate_env_list(info_t *);

/* get_env.c >> function prototypes */
char **get_environ(info_t *);
int _unsetenv(info_t *, char *);
int _setenv(info_t *, char *, char *);

/* hist.c >> function prototypes */
char *get_history_file(info_t *info);
int write_history(info_t *info);
int read_history(info_t *info);
int build_history_list(info_t *info, char *buf, int linecount);
int renumber_history(info_t *info);

/* ls.c >> function prototypes */
list_t *add_node(list_t **, const char *, int);
list_t *add_node_end(list_t **, const char *, int);
size_t print_list_str(const list_t *);
int delete_node_at_index(list_t **, unsigned int);
void free_list(list_t **);

/* ls1.c >> function prototypes */
size_t list_len(const list_t *);
char **list_to_strings(list_t *);
size_t print_list(const list_t *);
list_t *node_starts_with(list_t *, char *, char);
ssize_t get_node_index(list_t *, list_t *);

/** vars.c >> function prototypes **/
int is_chain(info_t *, char *, size_t *);
void check_chain(info_t *, char *, size_t *, size_t, size_t);
int replace_alias(info_t *);
int replace_vars(info_t *);
int replace_string(char **, char *);

#endif
